AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: S3-to-EventBridge Integration - Simple Invoke

Parameters:
   SourceBucketName:
      Type: String
      Default: 'sam-wordcount-app-src'
   LoggingBucketName:
      Type: String
      Default: 'sam-wordcount-app-logs'

Resources: 
  # S3 Bucket - A source bucket and a logging bucket
   SourceBucket: 
      Type: AWS::S3::Bucket
      Properties:
         BucketName: !Ref SourceBucketName

   LoggingBucket: 
      Type: AWS::S3::Bucket
      Properties:
         BucketName: !Ref LoggingBucketName

  # Bucket policy enables CloudTrail to write to the logging bucket
   BucketPolicy: 
     Type: AWS::S3::BucketPolicy
     Properties: 
       Bucket: 
         Ref: LoggingBucket
       PolicyDocument: 
         Version: "2012-10-17"
         Statement: 
           - 
             Sid: "AWSCloudTrailAclCheck"
             Effect: "Allow"
             Principal: 
               Service: "cloudtrail.amazonaws.com"
             Action: "s3:GetBucketAcl"
             Resource: 
               !Sub |-
                 arn:aws:s3:::${LoggingBucket}
           - 
             Sid: "AWSCloudTrailWrite"
             Effect: "Allow"
             Principal: 
               Service: "cloudtrail.amazonaws.com"
             Action: "s3:PutObject"
             Resource:
               !Sub |-
                 arn:aws:s3:::${LoggingBucket}/AWSLogs/${AWS::AccountId}/*
             Condition: 
               StringEquals:
                 s3:x-amz-acl: "bucket-owner-full-control"

  # The CloudTrail trail - uses the LoggingBucketName as the trail name
   myTrail: 
      Type: AWS::CloudTrail::Trail
      DependsOn: 
         - BucketPolicy
      Properties: 
         TrailName: !Ref LoggingBucketName
         S3BucketName: 
            Ref: LoggingBucket
         IsLogging: true
         IsMultiRegionTrail: false
         EventSelectors:
            - DataResources:
               - Type: AWS::S3::Object
                 Values:
                  - !Sub |-
                    arn:aws:s3:::${SourceBucket}/
         IncludeGlobalServiceEvents: false

   # Lambda function
   EventConsumerFunction:
      Type: AWS::Serverless::Function
      Properties:
         CodeUri: eventConsumer/
         Handler: app.lambda_handler
         Runtime: python3.8
         Role: !Ref LambdaRole

   # Cloudwatch group              
   CloudWatchLogsGroup:
      Type: AWS::Logs::LogGroup
      Properties:
         LogGroupName: /aws/ecs/sam-wordcount-app
         RetentionInDays: 7 
                 
   # ECS Cluster
   WordCountECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
         ClusterName: sam-wordcount-app-cluster

   # Fargate task
   WordCount:
      Type: AWS::ECS::TaskDefinition
      Properties: 
         Cpu: "256"
         Memory: "512"
         ExecutionRoleArn: !Ref ECSTaskRole
         Family: sam-wordcount-app
         NetworkMode: awsvpc
         RequiresCompatibilities:
            - FARGATE
         ContainerDefinitions:
            -
               Name: WordCount
               Image: 543414031934.dkr.ecr.us-east-1.amazonaws.com/wordcount:0.9.1
               PortMappings:
                  - ContainerPort: 8080
               LogConfiguration:
                  LogDriver: awslogs
                  Options:
                     awslogs-group: !Ref CloudWatchLogsGroup
                     awslogs-region: !Ref AWS::Region
                     awslogs-stream-prefix: WordCount 
                             
   # EventBridge rule - invokes EventConsumerFunction 
   EventRule: 
      Type: AWS::Events::Rule
      Properties: 
         Description: "EventRule"
         State: "ENABLED"
         EventPattern: 
            source: 
             - "aws.s3"
            detail: 
               eventName: 
               - "PutObject"
               requestParameters:
                  bucketName:
                  - !Ref SourceBucketName
         Targets: 
            - 
               Arn: 
                  Fn::GetAtt: 
                     - "EventConsumerFunction"
                     - "Arn"
               Id: "EventConsumerFunctionTarget"  
               
   PermissionForEventsToInvokeLambda: 
      Type: AWS::Lambda::Permission
      Properties: 
         FunctionName: 
            Ref: "EventConsumerFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
         SourceArn: 
            Fn::GetAtt: 
               - "EventRule"
               - "Arn"

   # Give ECS permission to access ECR and write logs to cloudwatch        
   ECSTaskRole:
      Type: AWS::IAM::Role
      Properties:
         AssumeRolePolicyDocument:
            Statement:
            - Effect: Allow
              Principal:
                  Service: [ecs-tasks.amazonaws.com]
              Action: ['sts:AssumeRole']
         Path: /
         Policies:
           - PolicyName: AWSECSTaskExecutionRolePolicy
             PolicyDocument:
               Statement:
               - Effect: Allow
                 Action:
                   # ECS Tasks to download images from ECR
                   - 'ecr:GetAuthorizationToken'
                   - 'ecr:BatchCheckLayerAvailability'
                   - 'ecr:GetDownloadUrlForLayer'
                   - 'ecr:BatchGetImage'
                   # ECS tasks to upload logs to CloudWatch
                   - 'logs:CreateLogStream'
                   - 'logs:PutLogEvents'
                 Resource: '*'
   LambdaRole:
       Type: AWS::IAM::Role
       Properties:
         AssumeRolePolicyDocument:
            Statement:
            - Effect: Allow
              Principal:
                Service: [ecs-tasks.amazonaws.com]
              Action: ['sts:AssumeRole']
         Path: /
         Policies:
           - PolicyName: AWSLambdaExecutionRolePolicy
             PolicyDocument:
               Statement:
               - Effect: Allow
                 Action:
                  # Execute ECS Tasks
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  # ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                 Resource: '*'                      
