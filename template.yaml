AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: App used to familiarize ourselves with a SAM deployment. Implementation is wordcount.

Parameters:
   AppName:
      Type: String
      Default: 'wordcount'      
   ContainerImage:
      Type: String
      Default: '543414031934.dkr.ecr.us-east-1.amazonaws.com/wordcount:0.9.1'

Resources:

   # ECS in Fargate mode needs a subnet to run on. Create a VPC so we can create a subnet.
   SamVPC:
      Type: AWS::EC2::VPC
      Properties: 
         CidrBlock: 172.20.0.0/16
         EnableDnsHostnames: True
         EnableDnsSupport: True
         InstanceTenancy: default
         
   # Subnet to run an ECS container in Fargate mode.         
   SamSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 172.20.1.0/24
        VpcId: !Ref SamVPC

  # S3 bucket to use to collect input files. EventBridge will be monitoring this bucket.
   SourceBucket: 
      Type: AWS::S3::Bucket
      Properties:
         BucketName: !Sub |-
            sam-${AppName}-app-src
            
   # S3 bucket to use to collect all logs the application generates
   LoggingBucket: 
      Type: AWS::S3::Bucket
      Properties:
         BucketName: !Sub |-
            sam-${AppName}-app-logs

  # Bucket policy enables CloudTrail to write to the logging bucket
   BucketPolicy: 
     Type: AWS::S3::BucketPolicy
     Properties: 
       Bucket: 
         Ref: LoggingBucket
       PolicyDocument: 
         Version: "2012-10-17"
         Statement: 
           - 
             Sid: "AWSCloudTrailAclCheck"
             Effect: "Allow"
             Principal: 
               Service: "cloudtrail.amazonaws.com"
             Action: "s3:GetBucketAcl"
             Resource: 
               !Sub |-
                 arn:aws:s3:::${LoggingBucket}
           - 
             Sid: "AWSCloudTrailWrite"
             Effect: "Allow"
             Principal: 
               Service: "cloudtrail.amazonaws.com"
             Action: "s3:PutObject"
             Resource:
               !Sub |-
                 arn:aws:s3:::${LoggingBucket}/AWSLogs/${AWS::AccountId}/*
             Condition: 
               StringEquals:
                 s3:x-amz-acl: "bucket-owner-full-control"

  # The CloudTrail trail - logs to the logging bucket
   appTrail: 
      Type: AWS::CloudTrail::Trail
      DependsOn: 
         - BucketPolicy
      Properties: 
         TrailName: !Ref LoggingBucket
         S3BucketName: 
            Ref: LoggingBucket
         IsLogging: true
         IsMultiRegionTrail: false
         EventSelectors:
            - DataResources:
               - Type: AWS::S3::Object
                 Values:
                  - !Sub |-
                    arn:aws:s3:::${SourceBucket}/
         IncludeGlobalServiceEvents: false

   # Lambda function invoked by EventBridge on events on the s3 application bucket. If PutObject results, fire off an ECS Fargate job to process.
   EventConsumerFunction:
      Type: AWS::Serverless::Function
      Properties:
         CodeUri: eventConsumer/
         Handler: app.lambda_handler
         Runtime: python3.8
         Role: !GetAtt LambdaRole.Arn
         Environment:
            Variables:
               CLUSTER: !Ref SamECSCluster
               LAUNCH_TYPE: "FARGATE"
               TASK_DEFINITION: !Ref SamECSTask
               SUBNET_ID: !Ref SamVPC
               CONTAINER_NAME: !Ref SamECSTask.ContainerDefinition.Name
           
   # EventBridge monitors the SourceBucket...any events, it sends a message to the lambda for processing
   EventRule: 
      Type: AWS::Events::Rule
      Properties: 
         Description: "EventRule"
         State: "ENABLED"
         EventPattern: 
            source: 
             - "aws.s3"
            detail: 
               eventName: 
               - "PutObject"
               requestParameters:
                  bucketName:
                  - !Ref SourceBucket
         Targets: 
            - 
               Arn: 
                  Fn::GetAtt: 
                     - "EventConsumerFunction"
                     - "Arn"
               Id: "EventConsumerFunctionTarget"  

   # Permissions for EventBridge to invoke a lambda function               
   PermissionForEventsToInvokeLambda: 
      Type: AWS::Lambda::Permission
      Properties: 
         FunctionName: 
            Ref: "EventConsumerFunction"
         Action: "lambda:InvokeFunction"
         Principal: "events.amazonaws.com"
         SourceArn: 
            Fn::GetAtt: 
               - "EventRule"
               - "Arn"
               
   # ECS Cluster used to run the Fargate task to process the input using a containerized app.
   SamECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
         ClusterName: !Sub |-
            sam-${AppName}-app-cluster
            
   # Fargate task on ECS Cluster
   SamECSTask:
      Type: AWS::ECS::TaskDefinition
      Properties: 
         Cpu: "256"
         Memory: "512"
         ExecutionRoleArn: !Ref ECSTaskRole
         Family: !Sub |-
            sam-${AppName}-app
         NetworkMode: awsvpc
         RequiresCompatibilities:
            - FARGATE
         ContainerDefinitions:
            -
               Name: !Sub |-
                  ${AppName}
               Image: !Sub |-
                  ${ContainerImage}
               PortMappings:
                  - ContainerPort: 8080
               LogConfiguration:
                  LogDriver: awslogs
                  Options:
                     awslogs-group: !Ref CloudWatchLogsGroup
                     awslogs-region: !Ref AWS::Region
                     awslogs-stream-prefix: !Sub |-
                        ${AppName}

   # Allow Lambda to invoke ECS, access ecr, and send logs to CloudTrail                                      
   LambdaRole:
       Type: AWS::IAM::Role
       Properties:
         AssumeRolePolicyDocument:
            Statement:
            - Effect: Allow
              Principal:
                Service: [lambda.amazonaws.com]
              Action: ['sts:AssumeRole']
         Path: /
         Policies:
           - PolicyName: AWSLambdaExecutionRolePolicy
             PolicyDocument:
               Statement:
               - Effect: Allow
                 Action:
                  # Execute ECS Tasks
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  # ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                 Resource: '*'
                 
   # Cloudwatch group              
   CloudWatchLogsGroup:
      Type: AWS::Logs::LogGroup
      Properties:
         LogGroupName: !Sub |-
            /aws/ecs/sam-${AppName}-app
         RetentionInDays: 7  
         
         
   # Give ECS permission to access ECR and write logs to cloudwatch        
   ECSTaskRole:
      Type: AWS::IAM::Role
      Properties:
         AssumeRolePolicyDocument:
            Statement:
            - Effect: Allow
              Principal:
                  Service: [ecs-tasks.amazonaws.com]
              Action: ['sts:AssumeRole']
         Path: /
         Policies:
           - PolicyName: AWSECSTaskExecutionRolePolicy
             PolicyDocument:
               Statement:
               - Effect: Allow
                 Action:
                   # ECS Tasks to download images from ECR
                   - 'ecr:GetAuthorizationToken'
                   - 'ecr:BatchCheckLayerAvailability'
                   - 'ecr:GetDownloadUrlForLayer'
                   - 'ecr:BatchGetImage'
                   # ECS tasks to upload logs to CloudWatch
                   - 'logs:CreateLogStream'
                   - 'logs:PutLogEvents'
                 Resource: '*'
                 
   # VPC Endpoint that allows the private subnet in the VPC to talk to AWS's S3 service without using the public internet              
   SamS3Endpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        ServiceName: com.amazonaws.us-east-1.s3
        VpcEndpointType: 'Gateway'
        VpcId: !Ref SamVPC

   # VPC Endpoint that allows the private subnet in the VPC to talk to AWS's logging service without using the public internet        
   SamLogsEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt SamVPC.DefaultSecurityGroup
        ServiceName: 'com.amazonaws.us-east-1.logs'
        SubnetIds: 
          - !Ref SamSubnet
        VpcEndpointType: 'Interface'
        VpcId: !Ref SamVPC

   # VPC Endpoint that allows the private subnet in the VPC to talk to AWS's ECR service without using the public internet. ECR service #1
   SamEcrApiEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt SamVPC.DefaultSecurityGroup
        ServiceName: 'com.amazonaws.us-east-1.ecr.api'
        SubnetIds: 
          - !Ref SamSubnet
        VpcEndpointType: 'Interface'
        VpcId: !Ref SamVPC
        
   # VPC Endpoint that allows the private subnet in the VPC to talk to AWS's ECR service without using the public internet. ECR service #2
   SamEcrDkrEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt SamVPC.DefaultSecurityGroup
        ServiceName: 'com.amazonaws.us-east-1.ecr.dkr'
        SubnetIds: 
          - !Ref SamSubnet
        VpcEndpointType: 'Interface'
        VpcId: !Ref SamVPC                              
